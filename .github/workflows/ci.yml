name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: back-end/package-lock.json
    
    - name: Install dependencies
      run: |
        cd back-end
        npm ci
    
    - name: Run linting
      run: |
        cd back-end
        npm run lint || true
    
    - name: Run tests
      run: |
        cd back-end
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/mseries-auto-test
        JWT_SECRET: test-secret-key
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: back-end/coverage
        flags: backend

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: MSeriesAutoOnlineSpares/package-lock.json
    
    - name: Install dependencies
      run: |
        cd MSeriesAutoOnlineSpares
        npm ci
    
    - name: Run linting
      run: |
        cd MSeriesAutoOnlineSpares
        npm run lint || true
    
    - name: Run tests
      run: |
        cd MSeriesAutoOnlineSpares
        npm test
      env:
        VITE_API_URL: http://localhost:3001/api
    
    - name: Build application
      run: |
        cd MSeriesAutoOnlineSpares
        npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: MSeriesAutoOnlineSpares/coverage
        flags: frontend

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install backend dependencies
      run: |
        cd back-end
        npm ci
    
    - name: Install frontend dependencies
      run: |
        cd MSeriesAutoOnlineSpares
        npm ci
    
    - name: Start backend server
      run: |
        cd back-end
        npm run seed
        npm start &
      env:
        NODE_ENV: test
        PORT: 3001
        MONGODB_URI: mongodb://localhost:27017/mseries-auto-test
        JWT_SECRET: test-secret-key
        FRONTEND_URL: http://localhost:5173
    
    - name: Start frontend server
      run: |
        cd MSeriesAutoOnlineSpares
        npm run dev &
      env:
        VITE_API_URL: http://localhost:3001/api
    
    - name: Wait for servers
      run: |
        npx wait-on http://localhost:3001/health
        npx wait-on http://localhost:5173
    
    - name: Run Cypress tests
      run: |
        cd MSeriesAutoOnlineSpares
        npm run test:e2e
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: MSeriesAutoOnlineSpares/cypress/screenshots

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway (Staging)
      run: |
        echo "Deploying to staging environment..."
        # Add Railway deployment commands here
    
    - name: Deploy to Vercel (Staging)
      run: |
        echo "Deploying frontend to staging..."
        # Add Vercel deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway (Production)
      run: |
        echo "Deploying to production environment..."
        # Add Railway deployment commands here
    
    - name: Deploy to Vercel (Production)
      run: |
        echo "Deploying frontend to production..."
        # Add Vercel deployment commands here
    
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
